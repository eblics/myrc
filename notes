#https://unix.stackexchange.com/questions/2434/is-there-a-basic-tutorial-for-grep-awk-and-sed
#https://www.runoob.com/linux/linux-comm-sed.html

#--------------------------------------------------------------------------------
$n 当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段
$0 这个变量包含执行过程中当前行的文本内容
-FILENAME 当前输入文件的名
FS 字段分隔符（默认是任何空格）
NF 表示字段数，在执行过程中对应于当前的字段数
NR 表示记录数，在执行过程中对应于当前的行号
OFS 输出字段分隔符（默认值是一个空格）
ORS 输出记录分隔符（默认值是一个换行符）
RS 记录分隔符（默认是一个换行符）

awk -F ':' 'BEGIN{print "line col user"}{print NR" |"NF" |"$1}END{print "----------------"FILENAME}' passwd
ls -l|awk 'BEGIN{size=0}{size+=$5}END{print " size is "size/1024/1024"M"}'

#print the columms of 1,4 in the file 'test.log', the defualt seperator is space.
awk '{print $1,$4}' test.log

#use comma as seperator
awk -F, '{print $1,$4}' test.log

#seperate with space first,and with comma
awk -F '[ ,]'  '{print $1,$2,$3}'  test.log
#+ repeat seperator
awk -F '[ :]+' 'NR==2 {print $4}'

#use variable a
cat test.log | awk -v a=1 '{print $1,$1+a}' 

#concat strings
cat test.txt | awk -v a=\" '{print a""$0""a}'

#if arg1=cond  then action
awk '$1=2017' {print}'
cat test.log | awk '$2!="sth,sth" {print}'

#print the line number
cat test.log | awk '{print NR}'

#print the data heading with nm at the second column
cat test.log | awk '$2 ~/nm.*  {print NR}'

#not start with nm
cat test.log | awk '$2 !~/nm.*  {print NR}'

cat test.log | awk '/2017.*  {print}'

#ignore the case
cat test.log | awk '{IGNORECASE=1}/nm/{print}'

#print substr of column
cat test.log | awk '{print substr($1,1,4)}'

cat test.log | awk '{split($1,a,",",print a[1],a[2]}'

#replace the  'nmask' with 'nask'
cat test.log | awk '{gsub("nmask","nask",$2};print}'

#--------------------------------------------------------------------------------
options:
-n 抑制自动(默认的) 输出 *** 读取下一个输入行
-e 执行多个sed指令
-f 运行脚本
-i 编辑文件内容 ***
-i.bak 编辑的同时创造.bak的备份
-r 使用扩展的正则表达式
command:
a 在匹配后追加 *
i 在匹配前插入
p 打印
d 删除
r/R 读取文件/一行
w 另存
s 查找
c 替换
y 替换
h/H 复制拷贝/追加模式空间(缓冲区)到存放空间
g/G 粘贴 从存放空间取回/追加到模式空间
x 两个空间内容的交换
n/N 拷贝/追加下一行内容到当前
D 删除\n之前的内容
P 打印\n之前的内容
b 无条件跳转
t 满足匹配后的跳转
T 不满足匹配时跳转

#the below two lines work the same, 'n' means next line
nl passwd|sed -n '{1~2p}
nl passwd|sed -n '{p;n}'

#change the spell to lower, the '&' means captured strings
sed 's/^[a-z_]\+/\u&/' passwd

#显示文件除前三行之外的全部内容
sed -n '1,3!p' passwd

#read 123.txt and copy to 1st line of abc.txt
sed '1r 123.txt' abc.txt

#write the 2rd line of 123.txt to abc.txt
sed '2w 123.txt' abc.txt

#write the lines matching 'xfs' to newfstab
sed '/xfs/w newfstab' /etc/fstab

#insert nmake after the 4th line
sed -e 4a\nmask test.log

#delete lines from 2 to 3
cat test.log | sed '2,3d'

#delete lines containing 'nmask'
nl test.log | sed '/nmask/d'

sed 's/strings/replace/g' 

#substitute
sed -e '/not/s/black/white/g' file
    the black cat was chased by the brown dog.
    the white cat was not chased by the brown dog.

#delete from word 'hello' to 'goodbye'
sed -e '/hello/,/goodbye/d' file


#write to file directly
sed -i 's/root/rm/' passwd

#--------------------------------------------------------------------------------
[options]主要参数：
－c：只输出匹配行的计数。
－I：不区分大 小写(只适用于单字符)。
－h：查询多文件时不显示文件名。
－l：查询多文件时只输出包含匹配字符的文件名。
－n：显示匹配行及 行号。
－s：不显示不存在或无匹配文本的错误信息。
－v：显示不包含匹配文本的所有行。
- e: 符合posix标准的正则表达式
- R: 递归搜索
pattern正则表达式主要参数：
\： 忽略正则表达式中特殊字符的原有含义。
^：匹配正则表达式的开始行。
$: 匹配正则表达式的结束行。
\<：从匹配正则表达 式的行开始。
\>：到匹配正则表达式的行结束。
[ ]：单个字符，如[A]即A符合要求 。
[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。
. ：匹配除换行符\n之外的任意字符
* ：匹配0或多个正好在它之前的那个字符

#通过管道过滤ls -l输出的内容，只显示以a开头的行。
 ls -l | grep \'^a\'

#显示所有以d开头的文件中包含test的行。
grep \'test\' d*

#显示在aa，bb，cc文件中匹配test的行。
grep \'test\' aa bb cc

#显示所有包含每个字符串至少有5个连续小写字符的字符串的行。
grep \'[a-z]{5}\' aa

#如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符（.*），这些字符后面紧跟着另外一个es（1），找到就显示该行。如果用egrep或grep -E，就不用""号进行转义，直接写成\'w(es)t.*1\'就可以了。
 grep \'w(es)t.*1\' aa

#search with the keywords in test2.txt
cat test.txt | grep -f test2.txt

#search in multiple files
grep 'linux' test.txt test2.txt

#search the lines started and unstarted with 'u'
cat test.txt |grep ^u
cat test.txt |grep ^[^u]

#search lines contains 'ed' or 'at'
cat test.txt |grep -E "ed|at"

#seven characters
grep '[a-z]\{7\}' *.txt


Practical Vim: Edit Text at the Speed of Thought

Below is some good tips for vim, see the book "Practical vim edit text as the speed of thought"
| :%normal A;"                                    | execute normal command in command mode.                                           |
| :exe "normal! gg/foo<cr>dd"                     | execute normal command in command mode.                                           |
| @:                                              | repeat last command                                                               |
| @[x]                                            | execute macro in register [x]                                                     |
| @@                                              | repeat last macro used recently                                                   |
| q:                                              | open command history                                                              |
| q/                                              | open search history                                                               |
| i_ctrl_r                                        | expression register                                                               |
| <c-d>                                           | wildmenu for command                                                              |
| q<x>q                                           | record a macro(running in normal mode)                                            |
| write                                           | ike & in shell                                                                    |
| z<x>                                            | z normal commands, most for fold                                                  |
| read !ls                                        | read from shell command                                                           |
| write !sh                                       | execute buffer in shell                                                           |
| :2,$!sort -t',' -k2                             | sort the lines with external command sort from line 2 to end                      |
| !G                                              | jump in command window, and execute external command from current line to end     |
| vim -u NONE -N                                  | open vim without user defined .vimrc                                              |
| ex_%                                            | current file                                                                      |
| ex_.                                            | current line                                                                      |
| N,M bdelete                                     | delete buffer from N to M                                                         |
| [a ]a  [t  ]t [q q[ [t t[                       | arg, tag, quickfix, tag                                                           |
| :h cmdline-special                              | speical chars in command line                                                     |
| :h ::h                                          | as above something chars in command line                                          |
| :h tabpage                                      | help for page                                                                     |
| :h window                                       | help for window                                                                   |
| :h file-searching                               |                                                                                   |
| :h changelist                                   |                                                                                   |
| :h /character-classes                           |                                                                                   |
| :h visual-search                                | search in visual mode                                                             |
| :h search-offset                                | search offset like 'e' to the end of match                                        |
| :h mapmode-x                                    |                                                                                   |
| :h s_flags                                      |                                                                                   |
| :h sub-replace-special                          |                                                                                   |
| :h tag-stack                                    |                                                                                   |
| :h tag-priority                                 |                                                                                   |
| :h 'infercase'                                  | help for infercase                                                                |
| :h compl-current                                |                                                                                   |
| :h compl-keyword                                |                                                                                   |
| :h 'include'                                    |                                                                                   |
| :h compl-tag                                    |                                                                                   |
| :h 'complete'                                   |                                                                                   |
| :h _##                                          | '#' present file name in the argumment list                                       |
| <c-w>T                                          | use current window as tab                                                         |
| gt                                              | jump to next tab                                                                  |
| lcd <path>                                      | change work directory to path                                                     |
| set path+=                                      | the 'find' command will start with                                                |
| <c-G>                                           | show the status of current buffer                                                 |
| argdo                                           | execute command on every file in `args`                                           |
| bufdo                                           | like argdo,bug in all buffers                                                     |
| f<char> ; ,                                     | find a char ;for repeating forward, '.' for going back                            |
| aw                                              | word                                                                              |
| viw vi} vaw va} etc                             | jump inner word/tag                                                               |
| ci" cit etc                                     | delete word in tags or quotes or something, and replace it with something         |
| :h mark-motions                                 | help for marks                                                                    |
| ``                                              | Position before the last jump within current file                                 |
| `.                                              | Location of last change                                                           |
| `^                                              | Location of last insertion                                                        |
| `[                                              | Start of last change or yank                                                      |
| `]                                              | End of last change or yank                                                        |
| `<                                              | Start of last visual selection                                                    |
| `>                                              | End of last visual selection                                                      |
| g;  g,                                          | jump between changelist                                                           |
| gi                                              | jump to last change pos                                                           |
| jumps                                           | jump list                                                                         |
| <c-]>                                           | jump to keywork                                                                   |
| _d{motion}                                      | delete without coping into register                                               |
| delete c                                        | delete line and put into register 'c'                                             |
| :yank                                           | yank command                                                                      |
| "0P                                             | paste the content of yank register, which is register 1                           |
| %                                               | Name of the current file                                                          |
| #                                               | Name of the alternate file                                                        |
| .                                               | Last inserted text                                                                |
| :                                               | Last Ex command                                                                   |
| /                                               | Last search pattern                                                               |
| set pastetoggle=<f5>                            | set paste off and on                                                              |
| "+p                                             | paste from system clipboard                                                       |
| qa qA                                           | the second will append keystrokes to reg 'a'                                      |
| :let @a=substitute(@a, '\~', 'vU', 'g')         | substitute with reg[a]                                                            |
| /\c /\C                                         | case insensitive and insentive                                                    |
| /\m /\M                                         | search magic or nonmagic, the former will explain '. *' chars as special meaning. |
| /\v \V                                          | very magic & nonmagic, very same as m/M                                           |
| /\v<the>                                        | char '<>' is zero width delimter for boundary                                     |
| h \zs \ze  etc                                  | some zero width delimeter                                                         |
| /\v"\zs[^"]+\ze"<CR>                            | zs and ze will exclude quate                                                      |
| /\v%(AndD)rew Neil/                             | % denote not capturing this subgroup                                              |
| /<something>  then :%s//g                       | first search, then substitude, this is very useful                                |
| =escape(@u, getcmdtype().'\')                   | escape string                                                                     |
| /\v"@<=[^"]+"@=                                 | postive searching                                                                 |
| incsearch                                       |                                                                                   |
| ?<string>                                       | backforward searching                                                             |
| :%s///gn                                        | count the lines of file                                                           |
| //                                              | use the previous search                                                           |
| <C-r>/                                          | put the last search pattern to buffer                                             |
| :%s/<C-r>//“\1”/g                               | use search pattern to substitute                                                  |
| :%s//\=@0/g                                     | use reg[0] to replace match                                                       |
| g&                                              | repeate substitude entire file,equivelent with::%s//~/&                           |
| &&                                              | use last substitute,and use the last flag                                         |
| :%s//\=submatch(0)-1/g                          | use submatch result express to do substitude                                      |
| :%s//\={"dog":"man"}[submatch(1)]/g             | swap 'dog' and 'man'                                                              |
| :argdo %s//Practical/ge                         | the 'e' flag suppress error                                                       |
| :[range] global[!] /{pattern}/ [cmd]            | execute cmd with global, vglobal dose the opposite                                |
| :g/{/ .+1,/}/-1 sort                            | match {} block and sort                                                           |
| :g/{/sil .+1,/}/-1 >                            | intent these lines, and don't echo messages using sil                             |
| :!ctags -R                                      | generate tags file                                                                |
| :autocmd BufWritePost * call system("ctags -R") | auto remake tags file when write.                                                 |
| <C-]> g<C-]>                                    | jump to tag, when there are multiple matched tags, the later will open a list     |
| K                                               | open manual                                                                       |
| <C-t>                                           | jump to last tag                                                                  |
| :tag <keyword><pattern>                         | same as <C-]>                                                                     |
| :tjump <keyword> <pattern>                      | same as g<C-]>                                                                    |
| :pop or <C-t>                                   | Reverse through tag history                                                       |
| :tag                                            | Advance through tag history                                                       |
| :tnext                                          | Jump to next matching tag                                                         |
| :tprev                                          | Jump to previous matching tag                                                     |
| :tfirst                                         | Jump to first matching tag                                                        |
| :tlast                                          | Jump to last matching tag                                                         |
| :tselect                                        | Prompt user to choose an item from the tag match list                             |
| make!                                           | make and don't jump to the first error, the '!' makes sure of it                  |
| :cnext                                          | Jump to next item                                                                 |
| :cprev                                          | Jump to previous item                                                             |
| :cfirst                                         | Jump to first item                                                                |
| :clast                                          | Jump to last item                                                                 |
| :cnfile                                         | Jump to first item in next file                                                   |
| :cpfile                                         | Jump to last item in previous file                                                |
| :cc N                                           | Jump to nth item                                                                  |
| :copen                                          | Open the quickfix window                                                          |
| :cclose                                         | Close the quickfix window                                                         |
| :cnewer                                         | open the newer quickfix list                                                      |
| :colder                                         | open the older quickfix list                                                      |
| :lmake lvimgrep lgrep                           | use the location list, it's saying that every buffer has its own quickfix list.   |
| :setlocal makeprg=                              | change default make programe                                                      |
| :setlocal efm=                                  | change default error format generated by making program                           |
| :compiler nodelint                              | change the default compiler, the result is same with above two commands.          |
| :args $VIMRUNTIME/compiler/*.vim                | see the compilers supported by vim                                                |
| :grep -n Waldo *                                | show the match num when using grep                                                |
| let grepprg="grep -n $* /dev/null               |                                                                                   |
| let grepformat="%f:%l:%m,%f:%l%m,%f %l%m        |                                                                                   |
| ack --nogroup --column Waldo *                  | display results as rows and gives column's number                                 |
| <C-e>                                           | dismiss the completion window                                                     |
| :ls!                                            | list all words in files, so can be popped up in completion window                 |
| :set complete-=i                                | set completion will find in                                                       |
| :set spell                                      | change the spell                                                                  |
| [s ]s                                           | jump between spell errors                                                         |
| z=  1z=                                         | open a suggesting words for error spells. the later will use the first one.       |
| zg                                              | Add current word to spell file                                                    |
| zw                                              | Remove current word from spell file                                               |
| zug                                             | Revert zg or zw command for current word                                          |
| :cd -                                           | go to the old directory                                                           |
| :h :cd-                                         |                                                                                   |
| :messages                                       | see the error during load vim script files                                        |
| vim $(fzf)                                      | use vim to edit the file filtered by fzf                                          |
| set virtualedit=all                             | can move thecursor what ever it wants                                             |
| CTRL_A                                          | add 1 to current num   see :h CTRL_A                                              |
| CTRL_X                                          | substract 1 to current  num                                                       |
| :set relativenum                                | display the relativenum up and down                                               |

for quickfix_item in getqflist()  
   let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
   endfor
   return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
