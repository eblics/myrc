#https://unix.stackexchange.com/questions/2434/is-there-a-basic-tutorial-for-grep-awk-and-sed
#https://www.runoob.com/linux/linux-comm-sed.html

#--------------------------------------------------------------------------------
$n 当前记录的第n个字段，比如n为1表示第一个字段，n为2表示第二个字段
$0 这个变量包含执行过程中当前行的文本内容
-FILENAME 当前输入文件的名
FS 字段分隔符（默认是任何空格）
NF 表示字段数，在执行过程中对应于当前的字段数
NR 表示记录数，在执行过程中对应于当前的行号
OFS 输出字段分隔符（默认值是一个空格）
ORS 输出记录分隔符（默认值是一个换行符）
RS 记录分隔符（默认是一个换行符）

awk -F ':' 'BEGIN{print "line col user"}{print NR" |"NF" |"$1}END{print "----------------"FILENAME}' passwd
ls -l|awk 'BEGIN{size=0}{size+=$5}END{print " size is "size/1024/1024"M"}'

#print the columms of 1,4 in the file 'test.log', the defualt seperator is space.
awk '{print $1,$4}' test.log

#use comma as seperator
awk -F, '{print $1,$4}' test.log

#seperate with space first,and with comma
awk -F '[ ,]'  '{print $1,$2,$3}'  test.log
#+ repeat seperator
awk -F '[ :]+' 'NR==2 {print $4}'

#use variable a
cat test.log | awk -v a=1 '{print $1,$1+a}' 

#concat strings
cat test.txt | awk -v a=\" '{print a""$0""a}'

#if arg1=cond  then action
awk '$1=2017' {print}'
cat test.log | awk '$2!="sth,sth" {print}'

#print the line number
cat test.log | awk '{print NR}'

#print the data heading with nm at the second column
cat test.log | awk '$2 ~/nm.*  {print NR}'

#not start with nm
cat test.log | awk '$2 !~/nm.*  {print NR}'

cat test.log | awk '/2017.*  {print}'

#ignore the case
cat test.log | awk '{IGNORECASE=1}/nm/{print}'

#print substr of column
cat test.log | awk '{print substr($1,1,4)}'

cat test.log | awk '{split($1,a,",",print a[1],a[2]}'

#replace the  'nmask' with 'nask'
cat test.log | awk '{gsub("nmask","nask",$2};print}'

#--------------------------------------------------------------------------------
options:
-n 抑制自动(默认的) 输出 *** 读取下一个输入行
-e 执行多个sed指令
-f 运行脚本
-i 编辑文件内容 ***
-i.bak 编辑的同时创造.bak的备份
-r 使用扩展的正则表达式
command:
a 在匹配后追加 *
i 在匹配前插入
p 打印
d 删除
r/R 读取文件/一行
w 另存
s 查找
c 替换
y 替换
h/H 复制拷贝/追加模式空间(缓冲区)到存放空间
g/G 粘贴 从存放空间取回/追加到模式空间
x 两个空间内容的交换
n/N 拷贝/追加下一行内容到当前
D 删除\n之前的内容
P 打印\n之前的内容
b 无条件跳转
t 满足匹配后的跳转
T 不满足匹配时跳转

#the below two lines work the same, 'n' means next line
nl passwd|sed -n '{1~2p}
nl passwd|sed -n '{p;n}'

#change the spell to lower, the '&' means captured strings
sed 's/^[a-z_]\+/\u&/' passwd

#显示文件除前三行之外的全部内容
sed -n '1,3!p' passwd

#read 123.txt and copy to 1st line of abc.txt
sed '1r 123.txt' abc.txt

#write the 2rd line of 123.txt to abc.txt
sed '2w 123.txt' abc.txt

#write the lines matching 'xfs' to newfstab
sed '/xfs/w newfstab' /etc/fstab

#insert nmake after the 4th line
sed -e 4a\nmask test.log

#delete lines from 2 to 3
cat test.log | sed '2,3d'

#delete lines containing 'nmask'
nl test.log | sed '/nmask/d'

sed 's/strings/replace/g' 

#substitute
sed -e '/not/s/black/white/g' file
    the black cat was chased by the brown dog.
    the white cat was not chased by the brown dog.

#delete from word 'hello' to 'goodbye'
sed -e '/hello/,/goodbye/d' file


#write to file directly
sed -i 's/root/rm/' passwd

#--------------------------------------------------------------------------------
[options]主要参数：
－c：只输出匹配行的计数。
－I：不区分大 小写(只适用于单字符)。
－h：查询多文件时不显示文件名。
－l：查询多文件时只输出包含匹配字符的文件名。
－n：显示匹配行及 行号。
－s：不显示不存在或无匹配文本的错误信息。
－v：显示不包含匹配文本的所有行。
- e: 符合posix标准的正则表达式
- R: 递归搜索
pattern正则表达式主要参数：
\： 忽略正则表达式中特殊字符的原有含义。
^：匹配正则表达式的开始行。
$: 匹配正则表达式的结束行。
\<：从匹配正则表达 式的行开始。
\>：到匹配正则表达式的行结束。
[ ]：单个字符，如[A]即A符合要求 。
[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。
. ：匹配除换行符\n之外的任意字符
* ：匹配0或多个正好在它之前的那个字符

#通过管道过滤ls -l输出的内容，只显示以a开头的行。
 ls -l | grep \'^a\'

#显示所有以d开头的文件中包含test的行。
grep \'test\' d*

#显示在aa，bb，cc文件中匹配test的行。
grep \'test\' aa bb cc

#显示所有包含每个字符串至少有5个连续小写字符的字符串的行。
grep \'[a-z]{5}\' aa

#如果west被匹配，则es就被存储到内存中，并标记为1，然后搜索任意个字符（.*），这些字符后面紧跟着另外一个es（1），找到就显示该行。如果用egrep或grep -E，就不用""号进行转义，直接写成\'w(es)t.*1\'就可以了。
 grep \'w(es)t.*1\' aa

#search with the keywords in test2.txt
cat test.txt | grep -f test2.txt

#search in multiple files
grep 'linux' test.txt test2.txt

#search the lines started and unstarted with 'u'
cat test.txt |grep ^u
cat test.txt |grep ^[^u]

#search lines contains 'ed' or 'at'
cat test.txt |grep -E "ed|at"

#seven characters
grep '[a-z]\{7\}' *.txt
